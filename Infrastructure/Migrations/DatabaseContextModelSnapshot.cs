// <auto-generated />
using System;
using Infrastructure.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Models.CashTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsSuccessful");

                    b.Property<decimal>("MarineCoin");

                    b.Property<DateTime>("TransferDate");

                    b.Property<string>("TransferNumber");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("MarineCoinTransfers");
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DisLike");

                    b.Property<Guid>("FunId");

                    b.Property<int>("FunType");

                    b.Property<int>("Like");

                    b.Property<string>("Message");

                    b.Property<int>("Status");

                    b.Property<DateTime>("SubmitDate");

                    b.Property<string>("UserPhoneNumber");

                    b.Property<Guid>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Models.ContactInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Email");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("ContactInfos");
                });

            modelBuilder.Entity("Domain.Models.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedTime");

                    b.Property<DateTime>("LastActivity");

                    b.Property<int>("Priority");

                    b.Property<int>("State");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("Domain.Models.Files", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FilePath");

                    b.Property<string>("FunID");

                    b.Property<string>("Name");

                    b.Property<DateTime>("PlaceDate");

                    b.Property<string>("ScheduleID");

                    b.Property<string>("Size");

                    b.Property<string>("UserID");

                    b.Property<bool>("isActive");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Domain.Models.Fun", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<string>("BackgroundPicture");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<int>("FunType");

                    b.Property<bool>("IsActive");

                    b.Property<int>("OnlineCapacity");

                    b.Property<decimal>("Price");

                    b.Property<int>("RealTimeCapacity");

                    b.Property<int>("SansDuration");

                    b.Property<int>("SansGapTime");

                    b.Property<int>("SansTotalCapacity");

                    b.Property<int>("SellerCapacity");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<string>("SystemFunCode");

                    b.Property<string>("icon");

                    b.HasKey("Id");

                    b.ToTable("Funs");
                });

            modelBuilder.Entity("Domain.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ConversationID");

                    b.Property<int>("MessageStatus");

                    b.Property<DateTime>("PlaceDate");

                    b.Property<Guid>("UserID");

                    b.Property<string>("UserName");

                    b.Property<string>("message");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AvailableCapacity");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<DateTime>("ExecuteDateTime");

                    b.Property<Guid>("FunId");

                    b.Property<int>("FunType");

                    b.Property<bool>("IsExist");

                    b.Property<decimal>("Price");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<string>("SystemFunCode");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Domain.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CellPhone");

                    b.Property<int>("Condition");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<string>("FullName");

                    b.Property<Guid>("FunId");

                    b.Property<int>("FunType");

                    b.Property<int>("NumberOfTicket");

                    b.Property<Guid>("ScheduleId");

                    b.Property<DateTime>("ScheduleMiladiTime");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<DateTime>("SubmitDate");

                    b.Property<string>("TicketNumber");

                    b.Property<decimal>("TotalPrice");

                    b.Property<Guid>("UserId");

                    b.Property<int>("WhereBuy");

                    b.HasKey("Id");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDay");

                    b.Property<string>("CardNumber");

                    b.Property<string>("CellPhone");

                    b.Property<Guid?>("ContactInfoId");

                    b.Property<DateTime>("DateJoin");

                    b.Property<string>("FullName");

                    b.Property<int>("Gender");

                    b.Property<bool>("IsActive");

                    b.Property<string>("NationalCode");

                    b.Property<string>("Password");

                    b.Property<string>("Provice");

                    b.Property<int>("RoleType");

                    b.Property<string>("ShabaNumber");

                    b.Property<string>("SystemUserCode");

                    b.Property<string>("UserName");

                    b.Property<string>("VerifyCode");

                    b.Property<decimal>("Wallet");

                    b.HasKey("Id");

                    b.HasIndex("ContactInfoId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.HasOne("Domain.Models.ContactInfo", "ContactInfo")
                        .WithMany()
                        .HasForeignKey("ContactInfoId");
                });
#pragma warning restore 612, 618
        }
    }
}
